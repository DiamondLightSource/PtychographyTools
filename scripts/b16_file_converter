#!/dls_sw/apps/ptypy/temporary_environment/miniconda/envs/full_dependencies/bin/python

import h5py as h5
import fabio
import numpy as np
import argparse
import os
import datetime
import logging

logfile = '/dls/tmp/ptypy_logging/b16/b16_file_converter_%s.log' % datetime.datetime.now().strftime('%Y%m%d%H%M%S')

logging.basicConfig(filename=logfile, level=logging.DEBUG)

parser = argparse.ArgumentParser(description='Converts the B16 data format to a hdf5 file')


parser.add_argument("--tif_folder", "-t",
                    dest="tif_folder",
                    help="The path to the folder containing the tifs",
                    default=None,
                    type=str)

parser.add_argument("--dat_file", "-d",
                    dest="dat_file",
                    help="The path to the .dat file containing the positions",
                    default=None,
                    type=str)

parser.add_argument("--mask_file", "-m",
		     dest="mask_file",
		     help="The path to the hdf5 file with entry /mask",
		     default=None,
		     type=str)

parser.add_argument('--output-file', '-o',
                    dest="output_file",
                    help="The file we want to save the output file to.",
                    default=None,
                    type=str)

args = parser.parse_args()

if (args.tif_folder is None) or not os.path.exists(args.tif_folder):
    logging.debug('You need to specify a valid path the folder containing the tiffs. Options is -t.')
    raise IOError('You need to specify a valid path the folder containing the tiffs. Options is -t.')

if (args.dat_file is None) or not os.path.exists(args.dat_file):
    logging.debug('You need to specify a valid path the dat file containing the positions. Options is -d.')
    raise IOError('You need to specify a valid path the dat file containing the positions. Options is -d.')

if (args.output_file is None) or os.path.exists(args.output_file):
    logging.debug('You need to specify an output file path that does not yet exist. We will create this. Options is -o.')
    raise IOError('You need to specify an output file path that does not yet exist. We will create this. Options is -o.')

logging.debug('tif_folder:%s, dat_file:%s, output_file:%s' % (args.tif_folder, args.dat_file, args.output_file))
positions = np.loadtxt(args.dat_file, skiprows=12, usecols=(0, 1))
x = positions[:, 0]
y = positions[:, 1]

data_frame = fabio.open(os.path.join(args.tif_folder + '00001.tif'))

if args.mask_file is None:
    logging.debug('No mask specified so will not mask anything.')
    mask=np.ones(data_frame.data.shape)
else:
    mask = h5.File(args.mask_file,'r')['/mask'][...]

#first lets make the converted file and datasets
logging.debug('Now going into the file writing...')
with h5.File(args.output_file, 'w') as fout:
    logging.debug("writing converted file to %s" % (args.output_file))
    fout.create_group('entry')
    fout['entry'].create_group('merlin')
    fout['entry/merlin'].create_dataset(name='data', shape=(len(x),)+data_frame.data.shape)
    fout['entry'].create_group('positions')
    fout['entry/positions'].create_dataset(name='x', data=x)
    fout['entry/positions'].create_dataset(name='y', data=y)
    fout['entry/merlin'].create_dataset(name='mask', data=mask)



    for i in range(1, len(x)+1):
        fout['entry/merlin/data'][i-1] = data_frame.getframe(i).data


logging.debug("Conversion done.")
