#!/usr/bin/env python
import argparse, os, sys

from ptychotools.utils import io, log, plotting
import ptypy.utils as u
u.verbose.set_level(3)

parser = argparse.ArgumentParser(description="Combining multiple reconstructions of a spectro scan")
parser.add_argument("scans", type=str, 
                    help="A range of scan numbers (e.g. 400-450) or .ptypy file with scan numbers.")
parser.add_argument("path", type=str,
                    help="The folder location where all the ptypy reconstructions are saved.")
parser.add_argument("-r", "--ramp", action="store_true",
                    help="Remove phase ramp in the reconstructions.")
parser.add_argument("-a", "--rmsupport", type=float, default=0.5,
                    help="Support for phase ramp removal given as a radius in fractional units, default is 0.5")
parser.add_argument("-i", "--rmiter", type=int, default=2,
                    help="Nr. of iterations for phase ramp removal, default is 2 iterations.")
parser.add_argument("-f", "--fmt", type=str, default=None,
                    help="Format of scan folder structure")
parser.add_argument("-n", "--norm", action="store_true",
                    help="Normalise each reconstruction to the median phase/optical density.")
parser.add_argument("-b", "--border", type=int, default=20,
                    help="Border to be cropped on each side of the reconstruction. Default is 20 px.")
parser.add_argument("-s", "--single", action="store_true",
                    help="Use this option if the reconstructions are stored in a single ptyr file")
parser.add_argument("-o", "--output", type=str, default=None,
                    help="Output folder, default is same as path.")
parser.add_argument("-m", "--movie", action="store_true",
                    help="Make a movie of the spectro scan.")
args = parser.parse_args()

if args.scans.endswith(".ptypy"):
    print(args.scans)
    with open(args.scans) as f:
        scan_ids = [int(l) for l in f.readlines() if l not in ["\n", "", " "]]
elif "-" in args.scans:
    start, stop = args.scans.split("-")
    print(start, stop)
    scan_ids = list(range(int(start),int(stop)+1))
else:
    log(3, "Could not parse given scan IDs, either .ptypy file or range has to be provided.")
    sys.exit(0)

if args.single:
    fnames = args.path + "scan_%d_%d/scan_%d_%d.ptyr" %(scan_ids[0], scan_ids[-1], scan_ids[0], scan_ids[-1])
else:
    if args.fmt == "04d":
        fnames = [args.path + "/scan_%04d/scan_%04d.ptyr" %(sid,sid) for sid in scan_ids]
    elif args.fmt == "linked":
        fnames = [args.path + "/scan_linked_%d/scan_linked_%d.ptyr" %(sid,sid) for sid in scan_ids]
    elif args.fmt == "stack":
        fnames = [args.path + "/stack_%d.ptyr" %(sid) for sid in scan_ids]
    else:
        fnames = [args.path + "/scan_%d/scan_%d.ptyr" %(sid,sid) for sid in scan_ids]

if args.output is None:
    outpath = args.path + "/spectro_scan_%d_%d" %(scan_ids[0], scan_ids[-1])
else:
    outpath = args.output + "/spectro_scan_%d_%d" %(scan_ids[0], scan_ids[-1])
prefix = "scan_%d_%d_" %(scan_ids[0], scan_ids[-1])
try:
    os.makedirs(outpath)
    log(3,"Create output folder: {}".format(outpath))
except FileExistsError:
    log(3,"Output folder ({}) already exists".format(outpath))

if args.single:
    io.write_single_ptyr_to_nxstxm(fnames, outpath, prefix=prefix, border=args.border, 
                                   rmramp=args.ramp, norm=args.norm, rmradius=args.rmsupport, rmiter=args.rmiter)
else:
    io.write_multiple_ptyr_to_nxstxm(fnames, outpath, prefix=prefix, border=args.border, 
                                     rmramp=args.ramp, norm=args.norm, rmradius=args.rmsupport, rmiter=args.rmiter)

if args.movie:
    plotting.make_spectro_scan_movie(outpath, prefix, radius=0.2)
