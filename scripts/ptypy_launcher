#!/bin/bash
SCRIPT_PATH="$( cd "$(dirname "$0")" ; pwd -P )" # this is the path to this launcher script

source $SCRIPT_PATH/utils

usage() {
      echo "Usage:"
      echo "This is the main ptypy launcher for Diamond Light source."
      echo "It can be called in a number of ways depending on what is needed."

      echo ":-c: path to the cluster config file."
      echo ":-j: path to the json file containing the reconstruction configuration."
      echo ":-i: identifier/scan_number. This can be a list in a file which ends .ptypy."
      echo ":-o: output	folder for the reconstruction (will be created).
                A sub folder will be made inside of this for each reconstruction."
      echo ":-p: propagate the output over the given zrange. Syntax: ZMIN,ZMAX"
}

PROPAGATE=false

while getopts "hj:c:i:o:p:" opt; do
  case $opt in
    c )
      CLUSTER_CONFIG_FILE=$OPTARG;
      ;;
    j )
      JSON_FILE=$OPTARG;
      ;;
    i ) 
      if [[ "$OPTARG" =~ ".ptypy" ]]; then
          IDENTIFIER_LIST=`cat $OPTARG`;
      else
          IDENTIFIER_LIST=$OPTARG
      fi
      ;;
    o )
      OUTPUT_FOLDER=$OPTARG;
      ;;
    p )
      PROPAGATE=true;
      ZRANGE=$OPTARG
      ;;
    h )
      usage
      exit 1;
      ;;
    * )
      usage
      exit 1;
      ;;
  esac
done

# now validate the parameters and output to the submitting console

if [ -z ${IDENTIFIER_LIST+x} ];
then
    echo "You need to pass a valid identifier/ list of identifiers."
    exit 1
fi

if [ -z ${CLUSTER_CONFIG_FILE+x} ];
then
    echo "$(date +"%Y:%m:%d:%H:%M:%S")  You need to pass the path to the cluster config file"
    exit 1
else
    source $CLUSTER_CONFIG_FILE; # this populates a bunch of parameters, so that's why they suddenly appear! Should document these.
    mkdir -p $LOG_DIRECTORY
fi

if [ -z ${JSON_FILE+x} ];
then 
    echo "You need to pass the path to the json file."
    exit 1
fi

if [ -z ${OUTPUT_FOLDER+x} ];
then
    echo "You need to pass an output folder."
    exit 1
else
    mkdir -p $OUTPUT_FOLDER
fi

module load global/cluster-quiet
echo "The log files are:"
echo "scan_number --> log file"

# now the per-identifier tasks
for IDENTIFIER in $IDENTIFIER_LIST; do
    LOG_FILE="$LOG_DIRECTORY/scan_${IDENTIFIER}_$(date +'%Y%m%d_%H%M%S').log"
    touch $LOG_FILE
    echo "$IDENTIFIER --> $LOG_FILE"
    log "The cluster config file is set to: $CLUSTER_CONFIG_FILE" $LOG_FILE
    log "The json file is set to: $JSON_FILE" $LOG_FILE
    log "The output folder is set to $OUTPUT_FOLDER" $LOG_FILE

    if $PROPAGATE;
    then
    log "I'll propagate the result" $LOG_FILE
    qsub -jsv /dls_sw/apps/sge/common/JSVs/savu.pl -j y -pe openmpi $TOTAL_NUM_PROCESSORS -l exclusive \
          -l infiniband -l gpu=$NUM_GPUS_PER_NODE -l gpu_arch=$GPU_ARCH -q $CLUSTER_QUEUE -P $PROJECT \
          -o $LOG_FILE -e $LOG_FILE $SCRIPT_PATH/ptypy_mpi_recipe -j $JSON_FILE -i $IDENTIFIER -o $OUTPUT_FOLDER -v $PTYPY_VERSION -p $ZRANGE -n $TOTAL_NUM_PROCESSORS -s $SINGLE_THREADED -l $LOG_FILE -p $ZRANGE >> $LOG_FILE


    else
    log "Not propagating the results" $LOG_FILE
    qsub -jsv /dls_sw/apps/sge/common/JSVs/savu.pl -j y -pe openmpi $TOTAL_NUM_PROCESSORS -l exclusive \
          -l infiniband -l gpu=$NUM_GPUS_PER_NODE -l gpu_arch=$GPU_ARCH -q $CLUSTER_QUEUE -P $PROJECT \
          -o $LOG_FILE -e $LOG_FILE $SCRIPT_PATH/ptypy_mpi_recipe -j $JSON_FILE -i $IDENTIFIER -o $OUTPUT_FOLDER -v $PTYPY_VERSION -n $TOTAL_NUM_PROCESSORS -s $SINGLE_THREADED -l $LOG_FILE >> $LOG_FILE
    fi

done
