#!/bin/bash

SCRIPT_PATH="$( cd "$(dirname "$0")" ; pwd -P )" # this is the path to this launcher script

echo $SCRIPT_PATH/utils

source $SCRIPT_PATH/utils

usage() {
      echo "Usage:"
      echo "This is the main ptypy launcher for Diamond Light source."
      echo "It can be called in a number of ways depending on what is needed."
      echo ":-h returns this help."
      echo ":-c: path to the cluster config file."
      echo ":-l links together all reconstructions specified by the json and identifier."
      echo ":-j: path to the json file containing the reconstruction configuration."
      echo ":-i: identifier/scan_number. This can be a list in a file which ends .ptypy."
      echo ":-o: output	folder for the reconstruction (will be created).
                A sub folder will be made inside of this for each reconstruction."
      echo ":-p: propagate the output over the given zrange. Syntax: ZMIN,ZMAX"
}

PROPAGATE=false
LINKED=false

while getopts "hlj:c:i:o:p:" opt; do
  case $opt in
    c )
      CLUSTER_CONFIG_FILE=`readlink -e $OPTARG`;
      ;;
    j )
      JSON_FILE=`readlink -e $OPTARG`;
      ;;
    i ) 
      if [[ "$OPTARG" =~ ".ptypy" ]]; then
          IDENTIFIER_LIST=`cat $OPTARG`;
      else
          IDENTIFIER_LIST=$OPTARG
      fi
      ;;
    o )
      OUTPUT_FOLDER=`readlink -e $OPTARG`;
      ;;
    l )
      LINKED=true
      ;;
    p )
      PROPAGATE=true;
      ZRANGE=$OPTARG
      ;;
    h )
      usage
      exit 1;
      ;;
    * )
      usage
      exit 1;
      ;;
  esac
done

# now validate the parameters and output to the submitting console

if [ -z ${IDENTIFIER_LIST+x} ];
then
    echo "You need to pass a valid identifier/ list of identifiers."
    exit 1
fi

if [ -z ${CLUSTER_CONFIG_FILE+x} ];
then
    echo "$(date +"%Y:%m:%d:%H:%M:%S")  You need to pass the path to the cluster config file"
    exit 1
else
    source $CLUSTER_CONFIG_FILE; # this populates a bunch of parameters, so that's why they suddenly appear! Should document these.
    mkdir -p $LOG_DIRECTORY
fi

if [ -z ${JSON_FILE+x} ];
then 
    echo "You need to pass the path to the json file."
    exit 1
fi

if [ -z ${OUTPUT_FOLDER+x} ];
then
    echo "You need to pass an output folder."
    exit 1
else
    mkdir -p $OUTPUT_FOLDER
fi


if [ "$CLUSTER_QUEUE" = "HAMILTON" ];
then
    echo "Using Hamilton"
    module load hamilton
#    qsub_args="-pe openmpi $TOTAL_NUM_PROCESSORS -l exclusive,gpu=$NUM_GPUS_PER_NODE,gpu_arch=$GPU_ARCH"
    NUM_NODES=$(expr $TOTAL_NUM_PROCESSORS / 40)
    MEMORY_REQUEST=$(($NUM_NODES*360))G  # for Hamilton we hardcode 360GB
    qsub_args="-pe openmpi $TOTAL_NUM_PROCESSORS -l exclusive,gpu=$NUM_GPUS_PER_NODE,m_mem_free=$MEMORY_REQUEST"

else
    module load global/cluster-quiet
    NUM_NODES=$(expr $TOTAL_NUM_PROCESSORS / 20)
    MEMORY_REQUEST=$(($NUM_NODES*240))G  # for com14 we hardcode 250GB
    qsub_args="-jsv /dls_sw/apps/sge/common/JSVs/savu.pl -j y -pe openmpi $TOTAL_NUM_PROCESSORS -l exclusive,infiniband,gpu=$NUM_GPUS_PER_NODE,gpu_arch=$GPU_ARCH,,m_mem_free=$MEMORY_REQUEST -q $CLUSTER_QUEUE"
fi

echo "The log files are:"
echo "scan_number --> log file"
echo "The script path is $SCRIPT_PATH"
# now the per-identifier tasks
# for linking the identifier needs to be the whole list.

if $LINKED;
then
    set -- $IDENTIFIER_LIST
    LOG_FILE="$LOG_DIRECTORY/scan_$1_linked_set_$(date +'%Y%m%d_%H%M%S').log"
    touch $LOG_FILE
    log "The log file is set to: $LOG_FILE" $LOG_FILE
    echo "$1 (linked submission) --> $LOG_FILE"
    if $PROPAGATE;
    then
        log "I'll propagate the result" $LOG_FILE
        qsub ${qsub_args} -P $PROJECT -o $LOG_FILE -e $LOG_FILE $SCRIPT_PATH/ptypy_mpi_recipe -q -j $JSON_FILE -o $OUTPUT_FOLDER -v $PTYPY_VERSION -n $TOTAL_NUM_PROCESSORS -s $SINGLE_THREADED -z $LOG_FILE -p $ZRANGE -i "$IDENTIFIER_LIST">> $LOG_FILE


    else
        log "Not propagating the results" $LOG_FILE
        log "I am here" $LOG_FILE
        log "The log file is:$LOG_FILE" $LOG_FILE
        log "The total number of processors is:$TOTAL_NUM_PROCESSORS" $LOG_FILE
        log "The output folder is:$OUTPUT_FOLDER" $LOG_FILE
        log "The json file is is:$JSON_FILE" $LOG_FILE
        log "The ptypy version is:$PTYPY_VERSION" $LOG_FILE
        log "The single threaded is:$SINGLE_THREADED" $LOG_FILE
        log "PROPAGATE IS:$PROPAGATE" $LOG_FILE
        log "identifier list:$IDENTIFIER_LIST" $LOG_FILE
        IDENTIFIER=`echo ${IDENTIFIER_LIST}`
        log "identifier is:$IDENTIFIER" $LOG_FILE
        qsub ${qsub_args} -P $PROJECT -o $LOG_FILE -e $LOG_FILE $SCRIPT_PATH/ptypy_mpi_recipe -j $JSON_FILE -i "$IDENTIFIER" -o $OUTPUT_FOLDER -v $PTYPY_VERSION -n $TOTAL_NUM_PROCESSORS -s $SINGLE_THREADED -z $LOG_FILE -q >> $LOG_FILE
    fi


else
    for IDENTIFIER in $IDENTIFIER_LIST; do
        LOG_FILE="$LOG_DIRECTORY/scan_${IDENTIFIER}_$(date +'%Y%m%d_%H%M%S').log"
        touch $LOG_FILE
        echo "$IDENTIFIER --> $LOG_FILE"
        log "I am here:" $LOG_FILE
        log "The log file is set to: $LOG_FILE" $LOG_FILE
        log "The cluster config file is set to: $CLUSTER_CONFIG_FILE" $LOG_FILE
        log "The json file is set to: $JSON_FILE" $LOG_FILE
        log "The output folder is set to $OUTPUT_FOLDER" $LOG_FILE

        if $PROPAGATE;
        then
            log "I'll propagate the result" $LOG_FILE
            qsub ${qsub_args} -P $PROJECT -o $LOG_FILE -e $LOG_FILE $SCRIPT_PATH/ptypy_mpi_recipe -j $JSON_FILE -i $IDENTIFIER -o $OUTPUT_FOLDER -v $PTYPY_VERSION -n $TOTAL_NUM_PROCESSORS -s $SINGLE_THREADED -z $LOG_FILE -p $ZRANGE >> $LOG_FILE


        else
            log "Not propagating the results" $LOG_FILE
            qsub ${qsub_args} -P $PROJECT -o $LOG_FILE -e $LOG_FILE $SCRIPT_PATH/ptypy_mpi_recipe -j $JSON_FILE -i $IDENTIFIER -o $OUTPUT_FOLDER -v $PTYPY_VERSION -n $TOTAL_NUM_PROCESSORS -s $SINGLE_THREADED -z $LOG_FILE >> $LOG_FILE
        fi

    done
fi
