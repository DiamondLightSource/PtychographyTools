#!/bin/bash

SCRIPT_PATH="$( cd "$(dirname "$0")" ; pwd -P )" # this is the path to this launcher script
source $SCRIPT_PATH/ptychotools.utils

usage() {
      echo "Usage:"
      echo "This is the main ptypy launcher for Diamond Light source."
      echo "It can be called in a number of ways depending on what is needed."
      echo ":-h returns this help."
      echo ":-c: path to the cluster config file."
      echo ":-l links together all reconstructions specified by the json and identifier."
      echo ":-g uses the GPU-accelerated version of ptypy"
      echo ":-j: path to the json file containing the reconstruction configuration."
      echo ":-i: identifier/scan_number. This can be a list in a file which ends .ptypy."
      echo ":-o: output	folder for the reconstruction (will be created).
                A sub folder will be made inside of this for each reconstruction."
      echo ":-p: propagate the output over the given zrange. Syntax: ZMIN,ZMAX"
}

PROPAGATE=false
LINKED=false
USE_GPU=false
EXTRA_ARGS=""
JOB_NAME="ptypy"

while getopts "hlgj:c:i:o:p:" opt; do
  case $opt in
    c )
      CLUSTER_CONFIG_FILE=`readlink -e $OPTARG`;
      ;;
    j )
      JSON_FILE=`readlink -e $OPTARG`;
      ;;
    i ) 
      if [[ "$OPTARG" =~ ".ptypy" ]]; then
          IDENTIFIER_LIST=`cat $OPTARG`;
      else
          IDENTIFIER_LIST=$OPTARG
      fi
      ;;
    o )
      OUTPUT_FOLDER=`readlink -e $OPTARG`;
      ;;
    l )
      LINKED=true
      ;;
    g )
      USE_GPU=true
      ;;
    p )
      PROPAGATE=true;
      ZRANGE=$OPTARG
      ;;
    h )
      usage
      exit 1;
      ;;
    * )
      usage
      exit 1;
      ;;
  esac
done

# now validate the parameters and output to the submitting console

if [ -z ${IDENTIFIER_LIST+x} ];
then
    echo "You need to pass a valid identifier/ list of identifiers."
    exit 1
fi

if [ -z ${CLUSTER_CONFIG_FILE+x} ];
then
    echo "$(date +"%Y:%m:%d:%H:%M:%S")  You need to pass the path to the cluster config file"
    exit 1
else
    source $CLUSTER_CONFIG_FILE; # this populates a bunch of parameters, so that's why they suddenly appear! Should document these.
    mkdir -p -m777 $LOG_DIRECTORY
fi

if [ -z ${JSON_FILE+x} ];
then 
    echo "You need to pass the path to the json file."
    exit 1
fi

if [ -z ${OUTPUT_FOLDER+x} ];
then
    echo "You need to pass an output folder."
    exit 1
else
    mkdir -p $OUTPUT_FOLDER
fi


if [ "$CLUSTER_QUEUE" = "HAMILTON" ];
then
    if $USE_GPU;
    then
	TOTAL_NUM_PROCESSORS=4;
	NUM_GPUS_PER_NODE=4;
	EXTRA_ARGS="$EXTRA_ARGS -g"
	JOB_NAME="ptypy_gpu"
	MEMORY_REQUEST=80G
    else
	MEMORY_REQUEST=8G # for Hamilton we hardcode 8G per slot	
    fi

    echo "Using Hamilton"
    module load hamilton-quiet
#    qsub_args="-pe openmpi $TOTAL_NUM_PROCESSORS -l exclusive,gpu=$NUM_GPUS_PER_NODE,gpu_arch=$GPU_ARCH"
    qsub_args="-terse -pe openmpi $TOTAL_NUM_PROCESSORS -l exclusive,gpu=$NUM_GPUS_PER_NODE,m_mem_free=$MEMORY_REQUEST -N $JOB_NAME"

else
    if $USE_GPU;
    then
	TOTAL_NUM_PROCESSORS=2;
	NUM_GPUS_PER_NODE=2;
	EXTRA_ARGS="$EXTRA_ARGS -g"
	JOB_NAME="ptypy_gpu"
	MEMORY_REQUEST=120G
    else
	MEMORY_REQUEST=12G # for com14 we hardcode 12GB per slot
    fi
    
    echo "Using the science cluster"
    module load global/cluster-quiet
    qsub_args="-jsv /dls_sw/apps/sge/common/JSVs/savu.pl -terse -j y -pe openmpi $TOTAL_NUM_PROCESSORS -l exclusive,infiniband,gpu=$NUM_GPUS_PER_NODE,gpu_arch=$GPU_ARCH,,m_mem_free=$MEMORY_REQUEST -q $CLUSTER_QUEUE -N $JOB_NAME"
fi

echo "The log files are:"
echo "scan_number --> log file"
echo "The script path is $SCRIPT_PATH"
# now the per-identifier tasks
# for linking the identifier needs to be the whole list.

if $LINKED;
then
    set -- $IDENTIFIER_LIST
    LOG_FILE="$LOG_DIRECTORY/scan_$1_linked_set_$(date +'%Y%m%d_%H%M%S').log"
    touch $LOG_FILE
    chmod +rw $LOG_FILE
    log "The log file is set to: $LOG_FILE" $LOG_FILE

    if $PROPAGATE;
    then
        log "I'll propagate the result" $LOG_FILE
        jid=`qsub ${qsub_args} -P $PROJECT -o $LOG_FILE -e $LOG_FILE $SCRIPT_PATH/ptychotools.ptypy_mpi_recipe -q -j $JSON_FILE -o $OUTPUT_FOLDER -v $PTYCHOTOOLS_VERSION -n $TOTAL_NUM_PROCESSORS -s $SINGLE_THREADED -z $LOG_FILE -p $ZRANGE -i "$IDENTIFIER_LIST" $EXTRA_ARGS`


    else
        log "Not propagating the results" $LOG_FILE
        log "I am here" $LOG_FILE
        log "The log file is:$LOG_FILE" $LOG_FILE
        log "The total number of processors is:$TOTAL_NUM_PROCESSORS" $LOG_FILE
        log "The output folder is:$OUTPUT_FOLDER" $LOG_FILE
        log "The json file is is:$JSON_FILE" $LOG_FILE
        log "The ptycho-tools version is:$PTYCHOTOOLS_VERSION" $LOG_FILE
        log "The single threaded is:$SINGLE_THREADED" $LOG_FILE
        log "PROPAGATE IS:$PROPAGATE" $LOG_FILE
        log "identifier list:$IDENTIFIER_LIST" $LOG_FILE
        IDENTIFIER=`echo ${IDENTIFIER_LIST}`
        log "identifier is:$IDENTIFIER" $LOG_FILE
        jid=`qsub ${qsub_args} -P $PROJECT -o $LOG_FILE -e $LOG_FILE $SCRIPT_PATH/ptychotools.ptypy_mpi_recipe -j $JSON_FILE -i "$IDENTIFIER" -o $OUTPUT_FOLDER -v $PTYCHOTOOLS_VERSION -n $TOTAL_NUM_PROCESSORS -s $SINGLE_THREADED -z $LOG_FILE -q $EXTRA_ARGS`

    fi
    echo "$1 (linked submission) --> $LOG_FILE / jobid:${jid}"

else
    for IDENTIFIER in $IDENTIFIER_LIST; do
        LOG_FILE="$LOG_DIRECTORY/scan_${IDENTIFIER}_$(date +'%Y%m%d_%H%M%S').log"
        touch $LOG_FILE
        chmod +rw $LOG_FILE

        log "PTYPY CLUSTER SUBMISSION LOG" $LOG_FILE
        log "The log file is set to: $LOG_FILE" $LOG_FILE
        log "The cluster config file is set to: $CLUSTER_CONFIG_FILE" $LOG_FILE
        log "The json file is set to: $JSON_FILE" $LOG_FILE
        log "The output folder is set to $OUTPUT_FOLDER" $LOG_FILE
	log "The project is $PROJECT" $LOG_FILE
	log "The cluster queue is $CLUSTER_QUEUE" $LOG_FILE
	log "The memory request is $MEMORY_REQUEST" $LOG_FILE

        if $PROPAGATE;
        then
            log "I'll propagate the result" $LOG_FILE
            jid=`qsub ${qsub_args} -P $PROJECT -o $LOG_FILE -e $LOG_FILE $SCRIPT_PATH/ptychotools.ptypy_mpi_recipe -j $JSON_FILE -i $IDENTIFIER -o $OUTPUT_FOLDER -v $PTYCHOTOOLS_VERSION -n $TOTAL_NUM_PROCESSORS -s $SINGLE_THREADED -z $LOG_FILE $EXTRA_ARGS -p $ZRANGE`


        else
            log "Not propagating the results" $LOG_FILE
            jid=`qsub ${qsub_args} -P $PROJECT -o $LOG_FILE -e $LOG_FILE $SCRIPT_PATH/ptychotools.ptypy_mpi_recipe -j $JSON_FILE -i $IDENTIFIER -o $OUTPUT_FOLDER -v $PTYCHOTOOLS_VERSION -n $TOTAL_NUM_PROCESSORS -s $SINGLE_THREADED -z $LOG_FILE $EXTRA_ARGS`
        fi
        echo "$IDENTIFIER --> $LOG_FILE / jobid:${jid}"
    done
fi
