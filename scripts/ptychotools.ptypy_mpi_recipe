#!/bin/bash




usage() {
      echo "Usage:"
      echo "-h: prints this help message"
      echo ":-s: Run single threaded (no MPI)"
      echo ":-z: path to the existing log file."
      echo ":-j: path to the json file."
      echo ":-i: identifier/scan_number."
      echo ":-o: output folder for the reconstruction (will be created)."
      echo ":-v: ptypy version to use"
      echo ":-n: Number of CPU processors per node"
      echo ":-g: uses the GPU-accelerated version of ptypy"
      echo ":-p: Propagate the result"
      echo ":-q: Link the reconstructions"
      echo ":-r: Number of repeated reconstructions (for validation)"
}

PROPAGATE=false
EXTRA_ARGS="-P 0"

while getopts "hqs:z:j:i:o:gv:n:p:r:" opt; do
  case $opt in
    h )
      usage
      exit 1;
      ;;
    q )
      EXTRA_ARGS="$EXTRA_ARGS -S"
      ;;
    s )
      SINGLE_THREADED=$OPTARG;
      ;;
    z )
      LOG_FILE=$OPTARG;
      ;;
    j )
      JSON_FILE=$OPTARG;
      ;;
    i )
      IDENTIFIER=$OPTARG;
      ;;
    o )
      OUTPUT_FOLDER=$OPTARG;
      ;;
    g )
      EXTRA_ARGS="$EXTRA_ARGS -G"
      ;;
    v )
      PTYPY_VERSION=$OPTARG;
      ;;
    n )
      NUM_PROCS_PER_NODE=$OPTARG;
      ;;
    p )
      PROPAGATE=true;
      ZRANGE=`echo $OPTARG | tr ',' ' '`;
      ZMIN=${ZRANGE%\ *};
      ZMAX=${ZRANGE#* };
      ;;
    r )
      REPEAT=$OPTARG;
      ;;
    *)
      usage
      exit 1;
      ;;
  esac
done

module load $PTYPY_VERSION >> "$LOG_FILE"

source ptychotools.utils

if [ -z ${PTYPY_VERSION+x} ];
then
    log "You need to pass the ptypy version" $LOG_FILE
    exit 1
else
    log "The ptypy version to use is $PTYPY_VERSION" $LOG_FILE
fi

if [ -z ${JSON_FILE+x} ];
then
    log "You need to pass the path to the json file." $LOG_FILE
    exit 1
else
    log "The json file is set to: $JSON_FILE" $LOG_FILE
fi

if [ -z ${IDENTIFIER+x} ];
then
    log "You need to pass a valid identifier." $LOG_FILE
    exit 1
else
    log "The identifier is set to: $IDENTIFIER" $LOG_FILE
fi

if [ -z ${NUM_PROCS_PER_NODE+x} ];
then
    log "You need to pass the number of processors" $LOG_FILE
    exit 1
else
    log "The number of processors per node are $NUM_PROCS_PER_NODE" $LOG_FILE
fi

if [ -z ${OUTPUT_FOLDER+x} ];
then
    log "You need to pass the output folder." $LOG_FILE
    exit 1
else
    log "The output folder is $OUTPUT_FOLDER" $LOG_FILE
fi



if $SINGLE_THREADED;
then
    log "Running single threaded ptypy, you are probably using the GPU engine at the moment" $LOG_FILE
    ptychotools.run $JSON_FILE -I $IDENTIFIER -O $OUTPUT_FOLDER $EXTRA_ARGS >> $LOG_FILE
    # how do we get $PTYR_FILE
    PTYR_FILE="$OUTPUT_FOLDER/scan_$IDENTIFIER/scan_$IDENTIFIER.ptyr" # this is a bit hardcoded...Is it a standard?
    if $PROPAGATE;
    then
        ptychotools.propagate -i $PTYR_FILE -o $OUTPUT_FOLDER/scan_$IDENTIFIER/ -z "$ZMIN $ZMAX" >> $LOG_FILE
    fi
else
    HOSTLIST=$(cat ${PE_HOSTFILE} | awk '{print $1}' | tr "\n" ",") # comma separated list of hosts
    #HOSTLIST_WITH_CORES=$(cat ${PE_HOSTFILE} | awk '{print $1,$2}' | tr "\n" ",") 
    echo "The hostlist is $HOSTLIST" >> $LOG_FILE
    #GETCORES=$(cat ${PE_HOSTFILE} | awk 'NR==1{print $2}')
    NUMCORES=$NUM_PROCS_PER_NODE
    echo "The number of cores per node is $NUMCORES" >> $LOG_FILE
    NUMNODES=$(echo $HOSTLIST | tr "-cd" "," | wc -c)
    echo "The number of nodes is $NUMNODES" >> $LOG_FILE
    NUM_PROCS=$(( NUMNODES * NUMCORES ))
    #HOSTLIST_WITH_CORES=${HOSTLIST_WITH_CORES// /:} 
    #HOSTLIST_WITH_CORES=${HOSTLIST_WITH_CORES%?} # gets rid of the trailing comma
    #echo "THE HOST LIST WITH CORES IS $HOSTLIST_WITH_CORES" >> $LOG_FILE
    HOST_LIST_WITH_CORES=${HOSTLIST//,/:$NUMCORES,} # puts in the number of cores where the comma would be
    HOST_LIST_WITH_CORES=${HOST_LIST_WITH_CORES%?} # gets rid of the trailing comma
    echo "THE HOST LIST WITH CORES IS $HOST_LIST_WITH_CORES" >> $LOG_FILE
    mpi_proc_cmd="-N ${NUM_PROCS_PER_NODE}"
    
    if (($REPEAT > 0));
    then
	for i in $(eval echo "{1..$REPEAT..1}")
	do
	    echo "This is reconstruction $i of a total of $REPEAT" >> $LOG_FILE
	    ii=$(printf "%03d" $i)
	    echo "$ii" >> $LOG_FILE
	    mpi_params="$mpi_proc_cmd -mca btl_tcp_if_exclude lo,docker0 -x MODULEPATH ptychotools.run $JSON_FILE -I $IDENTIFIER -O $OUTPUT_FOLDER/$ii $EXTRA_ARGS"
	    echo "The mpi params are $mpi_params" >> $LOG_FILE
	    mpirun $mpi_params >> $LOG_FILE
	done
    else
	mpi_params="$mpi_proc_cmd -mca btl_tcp_if_exclude lo,docker0 -x MODULEPATH ptychotools.run $JSON_FILE -I $IDENTIFIER -O $OUTPUT_FOLDER $EXTRA_ARGS"
	echo "The mpi params are $mpi_params" >> $LOG_FILE
	mpirun $mpi_params >> $LOG_FILE
    fi

    if $PROPAGATE;
    then
        # how do we get $PTYR_FILE
        PTYR_FILE="$OUTPUT_FOLDER/scan_$IDENTIFIER/scan_$IDENTIFIER.ptyr" # this is a bit hardcoded...Is it a standard?
        ptychotools.propagate -i $PTYR_FILE -o $OUTPUT_FOLDER/scan_$IDENTIFIER/ -z "$ZMIN $ZMAX" >> $LOG_FILE
    fi

fi
log "Processing for this file is all in: $OUTPUT_FOLDER" $LOG_FILE
log "################     PROCESSING COMPLETE      #############" $LOG_FILE

