#!/usr/bin/env python
import argparse
import numpy as np
import os

from ptypy.core import Ptycho
from ptychotools.propagation.focussing import propagate_probe
from ptychotools.utils.io import write_propagated_output, two_floats
from ptychotools.verbose import logger
from ptypy.utils import ortho



parser = argparse.ArgumentParser(description='Propagates a ptychography reconstruction using nearfield ASM over a given range.')


parser.add_argument("--input-file", "-i",
                    dest="input_file",
                    help="The path to the json configuration file.",
                    type=str)

parser.add_argument('--zrange', "-z",
                    help='The distance to propagate over. Provided in quotes "$zmin $zmax" in metres.',
                    action='store', type=two_floats,
                    default=[-1.e-3, 1.e-3])

parser.add_argument('--output-folder', '-o',
                    dest="output_folder",
                    help="The path we want to save the output hdf to (will get created).",
                    default=None,
                    type=str)

args = parser.parse_args()

if args.output_folder is None:
    raise IOError('You need to specify an output folder.')


NPTS = 1024

P = Ptycho.load_run(args.input_file, False)
parameters = P.p
probe_storages = P.probe.storages
obj_storages = P.obj.storages

first_scan_name_probe = list(probe_storages.keys())[0]
first_storage_probe = probe_storages[first_scan_name_probe]
logger.debug('Selecting the first eigenmode of the probe...')
weights, probes = ortho(first_storage_probe.data)
probe = probes[0]

probe_x = np.array(first_storage_probe.grids[0])[0, :, 0]
probe_y = np.array(first_storage_probe.grids[1])[0, 0, :]


first_scan_name_obj = list(obj_storages.keys())[0]
first_storage_obj = obj_storages[first_scan_name_obj]
obj = first_storage_obj.data[0]
obj_x = np.array(first_storage_obj.grids[0])[0, :, 0]
obj_y = np.array(first_storage_obj.grids[1])[0, 0, :]

meta = P.model.scans[first_scan_name_probe.strip('S').split('G')[0]].ptyscan.meta
energy = meta.energy
distance = meta.distance
psize = first_storage_probe._psize[0]

logger.debug('Propagating the beam...')
propagated_projections, zaxis, yaxis, xaxis = propagate_probe(probe, psize, energy, distance, args.zrange, NPTS=2000)
logger.debug('Finished propagation...')

logger.debug('Saving out the result...')
output_file_path = '{}_propagated.nxs'.format(os.path.join(args.output_folder, "scan_" + str(parameters.run)))
write_propagated_output(output_file_path, propagated_projections, probe_x, probe_y, probe, zaxis, obj_x, obj_y, obj)
logger.debug("Finished. Output  in: %s " % output_file_path)


